@page "/change-password"
@inject IAuthService AuthService
@inject NavigationManager Navigation

<FluentStack Orientation="Orientation.Vertical" VerticalGap="24" Style="max-width: 520px; margin: 0 auto; padding: 40px 20px;">
    <FluentStack Orientation="Orientation.Vertical" VerticalGap="8" Style="text-align: center;">
        <FluentIcon Value="@(new Icons.Regular.Size48.LockClosed())" Color="Color.Accent" />
        <FluentLabel Typo="Typography.H3" Color="Color.Accent">Change Password</FluentLabel>
        <FluentLabel Typo="Typography.Body" Color="Color.Neutral">Update your account password</FluentLabel>
    </FluentStack>

    <FluentCard Style="padding: 30px;">
        <EditForm Model="model" OnValidSubmit="HandleChangePasswordAsync">
            <DataAnnotationsValidator />
            <FluentValidationSummary />

            <FluentStack Orientation="Orientation.Vertical" VerticalGap="16">
                <FluentTextField @bind-Value="model.CurrentPassword"
                                 Label="Current Password"
                                 TextFieldType="TextFieldType.Password"
                                 Required="true"
                                 IconStart="@(new Icons.Regular.Size20.LockClosed())" />

                <FluentTextField @bind-Value="model.NewPassword"
                                 Label="New Password"
                                 TextFieldType="TextFieldType.Password"
                                 Required="true"
                                 IconStart="@(new Icons.Regular.Size20.Key())" />

                <FluentTextField @bind-Value="model.ConfirmPassword"
                                 Label="Confirm New Password"
                                 TextFieldType="TextFieldType.Password"
                                 Required="true"
                                 IconStart="@(new Icons.Regular.Size20.Key())" />

                <FluentButton Type="ButtonType.Submit"
                              Appearance="Appearance.Accent"
                              Disabled="@isLoading"
                              IconStart="@(new Icons.Regular.Size20.Save())">
                    @(isLoading ? "Saving..." : "Save Changes")
                </FluentButton>
            </FluentStack>
        </EditForm>
    </FluentCard>

    @if (!string.IsNullOrEmpty(message))
    {
        <FluentMessageBar Intent="@messageIntent">
            <FluentIcon Value="@((Icon)(messageIntent == MessageIntent.Error ? new Icons.Regular.Size20.ErrorCircle() : new Icons.Regular.Size20.CheckmarkCircle()))" Slot="icon" />
            @message
        </FluentMessageBar>
    }
</FluentStack>

@code {
    /// <summary>
    /// Modelo de formulario para el cambio de contrase침a
    /// </summary>
    private ChangePasswordModel model = new();

    /// <summary>
    /// Indicador de carga de la operaci칩n
    /// </summary>
    private bool isLoading = false;

    /// <summary>
    /// Mensaje informativo o de error
    /// </summary>
    private string? message;

    private MessageIntent messageIntent = MessageIntent.Info;

    /// <summary>
    /// Maneja el proceso de cambio de contrase침a usando IAuthService
    /// </summary>
    private async Task HandleChangePasswordAsync()
    {
        message = null;
        messageIntent = MessageIntent.Info;

        try
        {
            isLoading = true;

            if (string.IsNullOrWhiteSpace(model.CurrentPassword) ||
                string.IsNullOrWhiteSpace(model.NewPassword) ||
                string.IsNullOrWhiteSpace(model.ConfirmPassword))
            {
                message = "All fields are required.";
                messageIntent = MessageIntent.Error;
                return;
            }

            if (!string.Equals(model.NewPassword, model.ConfirmPassword, StringComparison.Ordinal))
            {
                message = "New passwords do not match.";
                messageIntent = MessageIntent.Error;
                return;
            }

            var success = await AuthService.ChangePasswordAsync(model.CurrentPassword, model.NewPassword);
            if (!success)
            {
                message = "The current password is incorrect or the operation failed.";
                messageIntent = MessageIntent.Error;
                return;
            }

            message = "Your password has been updated successfully.";
            messageIntent = MessageIntent.Success;

            await Task.Delay(600);
            Navigation.NavigateTo("/", true);
        }
        catch (Exception ex)
        {
            message = $"An unexpected error occurred: {ex.Message}";
            messageIntent = MessageIntent.Error;
        }
        finally
        {
            isLoading = false;
        }
    }

    /// <summary>
    /// Modelo de datos para cambio de contrase침a
    /// </summary>
    public class ChangePasswordModel
    {
        [Required]
        [MinLength(3)]
        public string CurrentPassword { get; set; } = string.Empty;

        [Required]
        [MinLength(6)]
        public string NewPassword { get; set; } = string.Empty;

        [Required]
        [MinLength(6)]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}