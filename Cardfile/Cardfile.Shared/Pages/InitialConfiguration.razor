@page "/initial-config"
@using Cardfile.Shared.Models
@using Cardfile.Shared.Services
@using Microsoft.FluentUI.AspNetCore.Components
@inject IAppConfigService AppConfigService
@inject IAppSettingsService AppSettingsService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Configuración Inicial - Cardfile</PageTitle>

<div class="initial-config-container">
    <FluentCard class="config-card">
        <div class="config-header">
            <FluentIcon Value="@(new Icons.Regular.Size48.FolderPerson())" Color="Color.Neutral" />
            <h1>Configuración Inicial</h1>
            <p>Bienvenido a Cardfile. Configura dónde deseas almacenar tus datos.</p>
        </div>

        <FluentStack Orientation="Orientation.Vertical" class="config-form">
            <!-- Tipo de Base de Datos -->
            <FluentStack Orientation="Orientation.Vertical" class="form-section">
                <FluentLabel Typography="Typography.PaneHeader">Tipo de Base de Datos</FluentLabel>
                <!-- Layout en 2 columnas para mejor aprovechamiento del espacio -->
                <div class="radio-grid">
                    <FluentCard class='@GetRadioCardClass("SQLite")' 
                              @onclick='() => SelectDatabaseType("SQLite")'>
                        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                            <FluentIcon Value="@(new Icons.Regular.Size20.DatabaseSearch())" Color="Color.Accent" />
                            <FluentStack Orientation="Orientation.Vertical">
                                <FluentLabel Weight="FontWeight.Bold">SQLite</FluentLabel>
                                <FluentLabel Typography="Typography.Caption" Color="Color.Neutral">Recomendado para uso local</FluentLabel>
                            </FluentStack>
                        </FluentStack>
                    </FluentCard>

                    <FluentCard class='@GetRadioCardClass("MySQL")' 
                              @onclick='() => SelectDatabaseType("MySQL")'>
                        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                            <FluentIcon Value="@(new Icons.Regular.Size20.Database())" Color="Color.Info" />
                            <FluentStack Orientation="Orientation.Vertical">
                                <FluentLabel Weight="FontWeight.Bold">MySQL</FluentLabel>
                                <FluentLabel Typography="Typography.Caption" Color="Color.Neutral">Base de datos MySQL</FluentLabel>
                            </FluentStack>
                        </FluentStack>
                    </FluentCard>

                    <FluentCard class='@GetRadioCardClass("MariaDB")' 
                              @onclick='() => SelectDatabaseType("MariaDB")'>
                        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                            <FluentIcon Value="@(new Icons.Regular.Size20.DatabaseLightning())" Color="Color.Success" />
                            <FluentStack Orientation="Orientation.Vertical">
                                <FluentLabel Weight="FontWeight.Bold">MariaDB</FluentLabel>
                                <FluentLabel Typography="Typography.Caption" Color="Color.Neutral">Base de datos MariaDB</FluentLabel>
                            </FluentStack>
                        </FluentStack>
                    </FluentCard>

                    <FluentCard class='@GetRadioCardClass("PostgreSQL")' 
                              @onclick='() => SelectDatabaseType("PostgreSQL")'>
                        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                            <FluentIcon Value="@(new Icons.Regular.Size20.Database())" Color="Color.Warning" />
                            <FluentStack Orientation="Orientation.Vertical">
                                <FluentLabel Weight="FontWeight.Bold">PostgreSQL</FluentLabel>
                                <FluentLabel Typography="Typography.Caption" Color="Color.Neutral">Base de datos PostgreSQL</FluentLabel>
                            </FluentStack>
                        </FluentStack>
                    </FluentCard>

                    <FluentCard class='@GetRadioCardClass("MsSQL")' 
                              @onclick='() => SelectDatabaseType("MsSQL")'>
                        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                            <FluentIcon Value="@(new Icons.Regular.Size20.DatabaseWindow())" Color="Color.Error" />
                            <FluentStack Orientation="Orientation.Vertical">
                                <FluentLabel Weight="FontWeight.Bold">Microsoft SQL Server</FluentLabel>
                                <FluentLabel Typography="Typography.Caption" Color="Color.Neutral">Base de datos SQL Server</FluentLabel>
                            </FluentStack>
                        </FluentStack>
                    </FluentCard>
                </div>
            </FluentStack>

            <!-- Configuración de Conexión -->
            @if (selectedDatabaseType != "SQLite")
            {
                <FluentStack Orientation="Orientation.Vertical" class="form-section">
                    <FluentLabel Typography="Typography.PaneHeader">Configuración de Conexión</FluentLabel>
                    <FluentStack Orientation="Orientation.Vertical">
                        <FluentTextField @bind-Value="connectionConfig.Host" 
                                       Label="Servidor" 
                                       Placeholder="localhost" 
                                       IconStart="@(new Icons.Regular.Size16.Server())" />

                        <FluentNumberField @bind-Value="connectionConfig.Port" 
                                         Label="Puerto" 
                                         Placeholder="@GetDefaultPort()"
                                         IconStart="@(new Icons.Regular.Size16.PlugConnected())" />

                        <FluentTextField @bind-Value="connectionConfig.DatabaseName" 
                                       Label="Nombre de la Base de Datos" 
                                       Placeholder="cardfile_db" 
                                       IconStart="@(new Icons.Regular.Size16.Database())" />

                        <FluentTextField @bind-Value="connectionConfig.Username" 
                                       Label="Usuario" 
                                       Placeholder="root" 
                                       IconStart="@(new Icons.Regular.Size16.Person())" />

                        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Bottom">
                            <FluentTextField @bind-Value="connectionConfig.Password" 
                                           Label="Contraseña" 
                                           TextFieldType="@passwordFieldType"
                                           Style="flex: 1;"
                                           IconStart="@(new Icons.Regular.Size16.LockClosed())" />
                            <FluentButton Appearance="Appearance.Stealth" 
                                        OnClick="TogglePasswordVisibility"
                                        Style="height: 32px; margin-left: 8px;">
                                <FluentIcon Value="@((Icon)(passwordFieldType == TextFieldType.Password ? new Icons.Regular.Size16.Eye() : new Icons.Regular.Size16.EyeOff()))" 
                                          Color="Color.Accent" />
                            </FluentButton>
                        </FluentStack>
                    </FluentStack>
                </FluentStack>
            }

            <!-- Configuración de Usuario Inicial -->
            <FluentStack Orientation="Orientation.Vertical" class="form-section">
                <FluentLabel Typography="Typography.PaneHeader">Configuración de Usuario Inicial</FluentLabel>
                <FluentStack Orientation="Orientation.Vertical">
                    <FluentTextField @bind-Value="initialUser.Username" 
                                   Label="Nombre de Usuario" 
                                   Placeholder="admin" 
                                   Required="true"
                                   IconStart="@(new Icons.Regular.Size16.Person())" />

                    <FluentTextField @bind-Value="initialUser.Email" 
                                   Label="Correo Electrónico" 
                                   Placeholder="admin@cardfile.com" 
                                   TextFieldType="TextFieldType.Email"
                                   Required="true"
                                   IconStart="@(new Icons.Regular.Size16.Mail())" />

                    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Bottom">
                        <FluentTextField @bind-Value="initialUser.Password" 
                                       Label="Contraseña" 
                                       TextFieldType="@userPasswordFieldType"
                                       Required="true"
                                       Style="flex: 1;"
                                       IconStart="@(new Icons.Regular.Size16.LockClosed())" />
                        <FluentButton Appearance="Appearance.Stealth" 
                                    OnClick="ToggleUserPasswordVisibility"
                                    Style="height: 32px; margin-left: 8px;">
                            <FluentIcon Value="@((Icon)(userPasswordFieldType == TextFieldType.Password ? new Icons.Regular.Size16.Eye() : new Icons.Regular.Size16.EyeOff()))" 
                                      Color="Color.Accent" />
                        </FluentButton>
                    </FluentStack>

                    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Bottom">
                        <FluentTextField @bind-Value="confirmPassword" 
                                       Label="Confirmar Contraseña" 
                                       TextFieldType="@confirmPasswordFieldType"
                                       Required="true"
                                       Style="flex: 1;"
                                       IconStart="@(new Icons.Regular.Size16.LockClosed())" />
                        <FluentButton Appearance="Appearance.Stealth" 
                                    OnClick="ToggleConfirmPasswordVisibility"
                                    Style="height: 32px; margin-left: 8px;">
                            <FluentIcon Value="@((Icon)(confirmPasswordFieldType == TextFieldType.Password ? new Icons.Regular.Size16.Eye() : new Icons.Regular.Size16.EyeOff()))" 
                                      Color="Color.Accent" />
                        </FluentButton>
                    </FluentStack>
                </FluentStack>
            </FluentStack>

            <!-- Idioma -->
            <FluentStack Orientation="Orientation.Vertical" class="form-section">
                <FluentLabel Typography="Typography.PaneHeader">Idioma</FluentLabel>
                <FluentSelect @bind-Value="selectedLanguage" 
                            Items="@languageOptions" 
                            OptionText="@(item => item.Text)" 
                            OptionValue="@(item => item.Value)"
                            Appearance="Appearance.Outline">
                    <FluentIcon Value="@(new Icons.Regular.Size16.LocalLanguage())" Slot="start" Color="Color.Neutral" />
                </FluentSelect>
            </FluentStack>

            <!-- Mensaje de Error -->
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <FluentMessageBar Intent="@MessageIntent.Error" class="error-message">
                    <FluentIcon Value="@(new Icons.Regular.Size16.ErrorCircle())" Color="Color.Error" />
                    @errorMessage
                </FluentMessageBar>
            }

            <!-- Botón de Guardar -->
            <FluentStack class="form-actions">
                <FluentButton Type="ButtonType.Submit" 
                            Appearance="Appearance.Accent" 
                            Loading="@isLoading"
                            OnClick="SaveConfigurationAsync"
                            class="save-button">
                    @if (isLoading)
                    {
                        <FluentIcon Value="@(new Icons.Regular.Size16.ArrowClockwise())" Color="Color.Fill" />
                        <span>Configurando...</span>
                    }
                    else
                    {
                        <FluentIcon Value="@(new Icons.Regular.Size16.Save())" Color="Color.Fill" />
                        <span>Guardar Configuración</span>
                    }
                </FluentButton>
            </FluentStack>
        </FluentStack>
    </FluentCard>
</div>

<style>
    .initial-config-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        padding: 20px;
        background: linear-gradient(135deg, var(--accent-fill-rest) 0%, var(--neutral-fill-strong-rest) 100%);
    }

    .config-card {
        max-width: 750px; /* Aumentado para acomodar 2 columnas */
        width: 100%;
        background: var(--neutral-layer-floating);
        border-radius: var(--control-corner-radius);
        box-shadow: var(--elevation-shadow-card-rest);
        overflow: hidden;
    }

    .config-header {
        text-align: center;
        padding: 40px 30px 20px;
        background: linear-gradient(135deg, var(--accent-fill-rest) 0%, var(--neutral-fill-strong-rest) 100%);
        color: var(--neutral-foreground-on-accent);
    }

    /* Grid en 2 columnas para los radio buttons */
    .radio-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 12px;
        width: 100%;
    }

    /* Responsive: en pantallas pequeñas volver a 1 columna */
    @@media (max-width: 768px) {
        .radio-grid {
            grid-template-columns: 1fr;
        }
        
        .config-card {
            max-width: 650px;
        }
    }

    .radio-card {
        padding: 12px;
        border: 1px solid var(--neutral-stroke-rest);
        border-radius: var(--control-corner-radius);
        transition: all 0.2s ease;
        cursor: pointer;
    }

    .radio-card:hover {
        border-color: var(--accent-fill-rest);
        box-shadow: var(--elevation-shadow-tooltip);
        transform: translateY(-2px);
    }

    .radio-card.selected {
        border-color: var(--accent-fill-rest);
        box-shadow: var(--elevation-shadow-dialog);
        background: color-mix(in srgb, var(--accent-fill-rest) 10%, transparent);
    }

    .radio-card:focus-visible {
        outline: 2px solid var(--focus-stroke-outer);
        outline-offset: 2px;
    }

    /* Eliminado: reglas para fluent-radio ya no son necesarias */
    /* .radio-card fluent-radio {
        width: 100%;
    } */
    .form-section {
        gap: 12px;
        margin-bottom: 24px;
    }

    .config-form {
        padding: 30px;
        gap: 24px;
    }

    .form-actions {
        justify-content: center;
        margin-top: 20px;
    }

    .save-button {
        min-width: 200px;
        height: 44px;
        gap: 8px;
    }

    .error-message {
        margin: 16px 0;
    }
</style>

@code {
    private string selectedDatabaseType = "SQLite";
    private string selectedLanguage = "es";
    private string errorMessage = string.Empty;
    private bool isLoading = false;
    private string confirmPassword = string.Empty;

    // Password visibility toggles <mcreference link="https://github.com/microsoft/fluentui-blazor/discussions/1122" index="1">1</mcreference>
    private TextFieldType passwordFieldType = TextFieldType.Password;
    private TextFieldType userPasswordFieldType = TextFieldType.Password;
    private TextFieldType confirmPasswordFieldType = TextFieldType.Password;

    private void SelectDatabaseType(string databaseType)
    {
        if (selectedDatabaseType == databaseType)
            return;

        selectedDatabaseType = databaseType;
        connectionConfig.Port = GetDefaultPortInt();
        StateHasChanged();
    }

    /// <summary>
    /// Obtiene la clase CSS para la tarjeta de base de datos según su estado de selección.
    /// </summary>
    /// <param name="databaseType">Tipo de base de datos</param>
    /// <returns>Clases CSS para la tarjeta</returns>
    private string GetRadioCardClass(string databaseType)
    {
        return selectedDatabaseType == databaseType ? "radio-card selected" : "radio-card";
    }

    private DatabaseConnectionConfig connectionConfig = new();
    private InitialUserConfig initialUser = new()
    {
        Username = "admin",
        Email = "admin@cardfile.com",
        Password = "admin123"
    };

    private readonly List<LanguageOption> languageOptions = new()
    {
        new() { Value = "es", Text = "Español" },
        new() { Value = "en", Text = "English" },
        new() { Value = "pt_BR", Text = "Português (Brasil)" },
        new() { Value = "fr", Text = "Français" }
    };

    /// <summary>
    /// Verifica si la aplicación ya fue configurada; permitir permanecer en la página incluso si ya está configurada.
    /// Esta página debe ser accesible desde el botón "Configurar" en Home para ajustar la configuración.
    /// </summary>
    protected override Task OnInitializedAsync()
    {
        try
        {
            // Anteriormente se redirigía si la app estaba configurada; quitamos esa redirección
            // para permitir que el usuario acceda a la configuración desde Home en cualquier momento.
            // Opcionalmente podríamos precargar valores existentes si fuera necesario.
        }
        catch
        {
            // Ignorar errores y permitir continuar con la página
        }

        // Establecer puerto por defecto según el tipo de base de datos seleccionado
        connectionConfig.Port = GetDefaultPortInt();
        return Task.CompletedTask;
    }

    /// <summary>
    /// Obtiene el puerto por defecto para el tipo de base de datos seleccionado
    /// </summary>
    private string GetDefaultPort()
    {
        return selectedDatabaseType switch
        {
            "MySQL" or "MariaDB" => "3306",
            "PostgreSQL" => "5432",
            "MsSQL" => "1433",
            _ => "3306"
        };
    }

    /// <summary>
    /// Obtiene el puerto por defecto como entero
    /// </summary>
    private int GetDefaultPortInt()
    {
        return selectedDatabaseType switch
        {
            "MySQL" or "MariaDB" => 3306,
            "PostgreSQL" => 5432,
            "MsSQL" => 1433,
            _ => 3306
        };
    }

    /// <summary>
    /// Alternar visibilidad de contraseña de conexión
    /// </summary>
    private void TogglePasswordVisibility()
    {
        passwordFieldType = passwordFieldType == TextFieldType.Password 
            ? TextFieldType.Text 
            : TextFieldType.Password;
    }

    /// <summary>
    /// Alternar visibilidad de contraseña de usuario
    /// </summary>
    private void ToggleUserPasswordVisibility()
    {
        userPasswordFieldType = userPasswordFieldType == TextFieldType.Password 
            ? TextFieldType.Text 
            : TextFieldType.Password;
    }

    /// <summary>
    /// Alternar visibilidad de confirmación de contraseña
    /// </summary>
    private void ToggleConfirmPasswordVisibility()
    {
        confirmPasswordFieldType = confirmPasswordFieldType == TextFieldType.Password 
            ? TextFieldType.Text 
            : TextFieldType.Password;
    }

    /// <summary>
    /// Guarda la configuración inicial de la aplicación
    /// </summary>
    private async Task SaveConfigurationAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            // Validar datos
            if (!ValidateConfiguration())
            {
                return;
            }

            // Update port based on database type if not manually changed
            if (connectionConfig.Port == GetDefaultPortInt() || connectionConfig.Port == 0)
            {
                connectionConfig.Port = GetDefaultPortInt();
            }

            // Crear configuración AppSettings para appsettings.json
            var settings = new AppSettings
            {
                IsConfigured = true,
                Language = selectedLanguage,
                DatabaseConfiguration = new DatabaseConfiguration
                {
                    DatabaseType = selectedDatabaseType,
                    ConnectionString = BuildConnectionString(),
                    AdditionalSettings = new Dictionary<string, string>()
                },
                LastUser = new LastUserInfo
                {
                    Username = initialUser.Username,
                    Email = initialUser.Email,
                    RememberCredentials = true,
                    LastLogin = DateTime.UtcNow
                }
            };

            // Guardar configuración persistente
            await AppSettingsService.SaveSettingsAsync(settings);

            // Además, guardar una AppConfig mínima para compatibilidad con servicios existentes si aplica
            var appConfig = new AppConfig
            {
                Id = Guid.NewGuid(),
                DatabaseType = selectedDatabaseType,
                Language = selectedLanguage,
                ConnectionString = BuildConnectionString(),
                RememberUser = true,
                RememberPassword = false,
                LastUser = initialUser.Username
            };
            await AppConfigService.AddAsync(appConfig);

            // Redirigir a la página principal
            Navigation.NavigateTo("/", true);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al guardar la configuración: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    /// <summary>
    /// Valida la configuración antes de guardarla
    /// </summary>
    private bool ValidateConfiguration()
    {
        if (string.IsNullOrWhiteSpace(initialUser.Username))
        {
            errorMessage = "El nombre de usuario es requerido.";
            return false;
        }

        if (string.IsNullOrWhiteSpace(initialUser.Email))
        {
            errorMessage = "El correo electrónico es requerido.";
            return false;
        }

        if (string.IsNullOrWhiteSpace(initialUser.Password))
        {
            errorMessage = "La contraseña es requerida.";
            return false;
        }

        if (initialUser.Password != confirmPassword)
        {
            errorMessage = "Las contraseñas no coinciden.";
            return false;
        }

        if (selectedDatabaseType != "SQLite")
        {
            if (string.IsNullOrWhiteSpace(connectionConfig.Host))
            {
                errorMessage = "El servidor es requerido para bases de datos remotas.";
                return false;
            }

            if (string.IsNullOrWhiteSpace(connectionConfig.DatabaseName))
            {
                errorMessage = "El nombre de la base de datos es requerido.";
                return false;
            }

            if (string.IsNullOrWhiteSpace(connectionConfig.Username))
            {
                errorMessage = "El usuario de la base de datos es requerido.";
                return false;
            }
        }

        return true;
    }

    /// <summary>
    /// Construye la cadena de conexión basada en el tipo de base de datos seleccionado
    /// </summary>
    private string BuildConnectionString()
    {
        return selectedDatabaseType switch
        {
            "SQLite" => "Data Source=cardfile.db",
            "MySQL" => $"Server={connectionConfig.Host};Port={connectionConfig.Port};Database={connectionConfig.DatabaseName};Uid={connectionConfig.Username};Pwd={connectionConfig.Password};",
            "MariaDB" => $"Server={connectionConfig.Host};Port={connectionConfig.Port};Database={connectionConfig.DatabaseName};Uid={connectionConfig.Username};Pwd={connectionConfig.Password};",
            "PostgreSQL" => $"Host={connectionConfig.Host};Port={connectionConfig.Port};Database={connectionConfig.DatabaseName};Username={connectionConfig.Username};Password={connectionConfig.Password};",
            "MsSQL" => $"Server={connectionConfig.Host},{connectionConfig.Port};Database={connectionConfig.DatabaseName};User Id={connectionConfig.Username};Password={connectionConfig.Password};TrustServerCertificate=true;",
            _ => "Data Source=cardfile.db"
        };
    }

    /// <summary>
    /// Configuración de conexión a base de datos
    /// </summary>
    private class DatabaseConnectionConfig
    {
        public string Host { get; set; } = "localhost";
        public int Port { get; set; } = 3306;
        public string DatabaseName { get; set; } = "cardfile_db";
        public string Username { get; set; } = "root";
        public string Password { get; set; } = string.Empty;
    }

    /// <summary>
    /// Configuración de usuario inicial
    /// </summary>
    private class InitialUserConfig
    {
        public string Username { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    /// <summary>
    /// Opción de idioma para el selector
    /// </summary>
    private class LanguageOption
    {
        public string Value { get; set; } = string.Empty;
        public string Text { get; set; } = string.Empty;
    }
}