@page "/"
@attribute [Authorize]
@using Cardfile.Shared.Services
@using Cardfile.Shared.Models
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.AspNetCore.Authorization
@inject IFormFactor FormFactor
@inject IAppConfigService AppConfigService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IAppSettingsService AppSettingsService

<PageTitle>Home - Cardfile</PageTitle>

@if (isLoading)
{
    <div class="loading-container">
        <FluentProgressRing />
        <p>Cargando aplicación...</p>
    </div>
}
else if (showInitialConfig)
{
    <!-- Mostrar configuración inicial -->
    <InitialConfiguration />
}
else
{
    <!-- Contenido principal de la aplicación -->
    <div class="home-container">
        <div class="welcome-section">
            <FluentIcon Value="@(new Icons.Regular.Size48.ContactCard())" Color="Color.Accent" />
            <h1>¡Bienvenido a Cardfile!</h1>
            <p>Tu aplicación de gestión de tarjetas ejecutándose en <em>@factor</em> usando <em>@platform</em>.</p>
        </div>

        <div class="quick-actions">
            <FluentCard class="action-card">
                <FluentIcon Value="@(new Icons.Regular.Size24.Add())" Color="Color.Accent" />
                <h3>Crear Nueva Tarjeta</h3>
                <p>Comienza creando tu primera tarjeta de información.</p>
                <FluentButton Appearance="Appearance.Accent" OnClick="NavigateToCards">
                    Ir a Tarjetas
                </FluentButton>
            </FluentCard>

            <FluentCard class="action-card">
                <FluentIcon Value="@(new Icons.Regular.Size24.Settings())" Color="Color.Neutral" />
                <h3>Configuración</h3>
                <p>Personaliza tu experiencia y configuración de datos.</p>
                <FluentButton Appearance="Appearance.Neutral" OnClick="NavigateToConfig">
                    Configurar
                </FluentButton>
            </FluentCard>
        </div>

        <div class="stats-section">
            <FluentCard>
                <h3>Estado de la Aplicación</h3>
                <div class="stats-grid">
                    <div class="stat-item">
                        <FluentIcon Value="@(new Icons.Regular.Size20.ContactCard())" />
                        <span>Base de Datos: @currentConfig?.DatabaseType</span>
                    </div>
                    <div class="stat-item">
                        <FluentIcon Value="@(new Icons.Regular.Size20.LocalLanguage())" />
                        <span>Idioma: @GetLanguageDisplayName(currentConfig?.Language)</span>
                    </div>
                </div>
            </FluentCard>
        </div>
    </div>
}

<style>
    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100vh;
        gap: 20px;
    }

    .home-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .welcome-section {
        text-align: center;
        margin-bottom: 40px;
        padding: 40px 20px;
    }

    .welcome-section h1 {
        margin: 20px 0 10px;
        font-size: 2.5rem;
        color: #333;
    }

    .welcome-section p {
        font-size: 1.2rem;
        color: #666;
        margin: 0;
    }

    .quick-actions {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
        margin-bottom: 40px;
    }

    .action-card {
        padding: 30px;
        text-align: center;
        transition: transform 0.2s ease;
    }

    .action-card:hover {
        transform: translateY(-2px);
    }

    .action-card h3 {
        margin: 15px 0 10px;
        color: #333;
    }

    .action-card p {
        color: #666;
        margin-bottom: 20px;
    }

    .stats-section {
        margin-top: 40px;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
        margin-top: 15px;
    }

    .stat-item {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 10px;
        background: #f8f9fa;
        border-radius: 6px;
    }
</style>

@code {
    private string factor => FormFactor.GetFormFactor();
    private string platform => FormFactor.GetPlatform();
    private bool isLoading = true;
    private bool showInitialConfig = false;
    private AppConfig? currentConfig;

    /// <summary>
    /// Inicialización del componente
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Verificar configuración en appsettings.json
            var isConfigured = await AppSettingsService.IsConfiguredAsync();

            if (!isConfigured)
            {
                // Primera vez - mostrar configuración inicial
                showInitialConfig = true;
            }
            else
            {
                // Ya configurado - cargar configuración actual
                var settings = await AppSettingsService.GetCurrentSettingsAsync();
                currentConfig = new AppConfig
                {
                    Id = Guid.NewGuid(),
                    DatabaseType = settings?.DatabaseConfiguration.DatabaseType ?? "SQLite",
                    ConnectionString = settings?.DatabaseConfiguration.ConnectionString,
                    Language = settings?.Language
                };
                showInitialConfig = false;
            }
        }
        catch (Exception ex)
        {
            // En caso de error, asumir que no está configurado
            Console.WriteLine($"Error checking configuration: {ex.Message}");
            showInitialConfig = true;
        }
        finally
        {
            isLoading = false;
        }
    }

    /// <summary>
    /// Navega a la página de tarjetas
    /// </summary>
    private void NavigateToCards()
    {
        Navigation.NavigateTo("/cards");
    }

    /// <summary>
    /// Navega a la página de configuración
    /// </summary>
    private void NavigateToConfig()
    {
        Navigation.NavigateTo("/initial-config");
    }

    /// <summary>
    /// Obtiene el nombre de visualización del idioma
    /// </summary>
    private string GetLanguageDisplayName(string? languageCode)
    {
        return languageCode switch
        {
            "es" => "Español",
            "en" => "English",
            "pt_BR" => "Português (Brasil)",
            "fr" => "Français",
            _ => "Español"
        };
    }
}
