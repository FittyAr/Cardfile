@page "/cards"
@using Cardfile.Shared.Models
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@inject Cardfile.Shared.Services.ICardService CardService
@inject Cardfile.Shared.Services.ITagService TagService
@inject Cardfile.Shared.Services.ICardAttachmentService AttachmentService

<PageTitle>My Cards</PageTitle>

<FluentStack Orientation="Orientation.Vertical" VerticalGap="30" Style="padding: 20px;">
    <!-- Header -->
    <FluentCard Style="padding: 30px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;">
        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
            <FluentIcon Value="@(new Icons.Regular.Size24.Library())" /> 
            <FluentLabel Typo="Typography.H3" Style="margin: 0; font-weight: 600;">My Card Collection</FluentLabel>
        </FluentStack>
        
        <FluentStack Orientation="Orientation.Horizontal" VerticalGap="15" Style="margin-top: 20px;">
            <FluentTextField @bind-Value="searchTerm" 
                           Placeholder="Search cards..."
                           Style="flex-grow: 1; max-width: 400px;"
                           IconStart="@(new Icons.Regular.Size20.Search())"
                           @oninput="OnSearchChanged" />
            
            <FluentButton Appearance="Appearance.Accent" 
                         IconStart="@(new Icons.Regular.Size20.Add())"
                         @onclick="ShowAddCard">
                Add New Card
            </FluentButton>
        </FluentStack>
    </FluentCard>

    <!-- Statistics Cards -->
    <FluentGrid Spacing="3">
        <FluentGridItem xs="12" sm="6" md="3">
            <FluentCard Style="padding: 25px; text-align: center; background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);">
                <FluentIcon Value="@(new Icons.Regular.Size32.Library())" />
                <FluentLabel Typo="Typography.H4" Style="margin: 10px 0 5px 0; font-weight: 600;">@cards.Count</FluentLabel>
                <FluentLabel Typo="Typography.Body" Color="Color.Neutral">Total Cards</FluentLabel>
            </FluentCard>
        </FluentGridItem>
        
        <FluentGridItem xs="12" sm="6" md="3">
            <FluentCard Style="padding: 25px; text-align: center; background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);">
                <FluentIcon Value="@(new Icons.Regular.Size32.Tag())" />
                <FluentLabel Typo="Typography.H4" Style="margin: 10px 0 5px 0; font-weight: 600;">@uniqueTags.Count</FluentLabel>
                <FluentLabel Typo="Typography.Body" Color="Color.Neutral">Unique Tags</FluentLabel>
            </FluentCard>
        </FluentGridItem>
        
        <FluentGridItem xs="12" sm="6" md="3">
            <FluentCard Style="padding: 25px; text-align: center; background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);">
                <FluentIcon Value="@(new Icons.Regular.Size32.Calendar())" />
                <FluentLabel Typo="Typography.H4" Style="margin: 10px 0 5px 0; font-weight: 600;">@GetRecentCards().Count()</FluentLabel>
                <FluentLabel Typo="Typography.Body" Color="Color.Neutral">Recent Cards</FluentLabel>
            </FluentCard>
        </FluentGridItem>
        
        <FluentGridItem xs="12" sm="6" md="3">
            <FluentCard Style="padding: 25px; text-align: center; background: linear-gradient(135deg, #d299c2 0%, #fef9d7 100%);">
                <FluentIcon Value="@(new Icons.Regular.Size32.Edit())" />
                <FluentLabel Typo="Typography.H4" Style="margin: 10px 0 5px 0; font-weight: 600;">@GetRecentlyUpdated().Count()</FluentLabel>
                <FluentLabel Typo="Typography.Body" Color="Color.Neutral">Recently Updated</FluentLabel>
            </FluentCard>
        </FluentGridItem>
    </FluentGrid>

    <!-- Filters and Sorting -->
    <FluentCard Style="padding: 20px;" AreaRestricted="false">
        <FluentStack Orientation="Orientation.Horizontal" VerticalGap="15" Wrap="true">
            <FluentSelect TOption="string" @bind-Value="sortBy" Style="min-width: 150px;">
                <FluentOption Value="newest">Newest First</FluentOption>
                <FluentOption Value="oldest">Oldest First</FluentOption>
                <FluentOption Value="title">By Title</FluentOption>
                <FluentOption Value="updated">Recently Updated</FluentOption>
            </FluentSelect>
            
            <FluentSelect TOption="string" @bind-Value="filterTag" Style="min-width: 150px;">
                <FluentOption Value="">All Tags</FluentOption>
                @foreach (var tag in uniqueTags)
                {
                    <FluentOption Value="@tag">@tag</FluentOption>
                }
            </FluentSelect>
            
            <FluentButton Appearance="Appearance.Neutral" 
                         @onclick="ClearFilters">
                Clear Filters
            </FluentButton>
        </FluentStack>
    </FluentCard>

    <!-- Cards Grid -->
    @if (!GetFilteredCards().Any())
    {
        <FluentCard Style="padding: 60px; text-align: center; background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);">
            <FluentStack Orientation="Orientation.Vertical" VerticalGap="20" HorizontalAlignment="HorizontalAlignment.Center">
                <div style="font-size: 48px; color: var(--neutral-foreground-rest); text-align: center;">üîç</div>
                <FluentLabel Typo="Typography.H4" Color="Color.Neutral">No cards found</FluentLabel>
                <FluentLabel Typo="Typography.Body" Color="Color.Neutral" Style="max-width: 400px;">
                    Try adjusting your search terms or filters, or create your first card to get started.
                </FluentLabel>
                <FluentButton Appearance="Appearance.Accent" 
                             @onclick="ShowAddCard">
                    Create Your First Card
                </FluentButton>
            </FluentStack>
        </FluentCard>
    }
    else
    {
        <FluentGrid Spacing="3">
            @foreach (var card in GetFilteredCards())
            {
                <FluentGridItem xs="12" sm="6" md="4" lg="3">
                    <FluentCard Style="height: 100%; min-height: 320px; transition: all 0.3s ease; cursor: pointer; position: relative;"
                              @onclick="() => SelectCard(card)"
                              Class="card-hover">
                        
                        <!-- Card Header -->
                        <div style="padding: 20px 20px 15px 20px; border-bottom: 1px solid #f0f0f0;">
                            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                                <FluentLabel Typo="Typography.H6" Color="Color.Accent" Style="flex-grow: 1; margin: 0; font-weight: 600;">
                                    @card.Title
                                </FluentLabel>
                                
                                <FluentMenuButton Icon="@(new Icons.Regular.Size16.MoreVertical())" 
                                                 Appearance="Appearance.Stealth">
                                    <FluentMenuItem @onclick="() => EditCard(card)">
                                        <FluentIcon Value="@(new Icons.Regular.Size16.Edit())" Slot="start" />
                                        Edit
                                    </FluentMenuItem>
                                    <FluentMenuItem @onclick="async () => await DuplicateCardAsync(card)">
                                        <FluentIcon Value="@(new Icons.Regular.Size16.DocumentCopy())" Slot="start" />
                                        Duplicate
                                    </FluentMenuItem>
                                    <FluentDivider />
                                    <FluentMenuItem @onclick="() => ConfirmDelete(card)">
                                        <FluentIcon Value="@(new Icons.Regular.Size16.Delete())" Slot="start" />
                                        Delete
                                    </FluentMenuItem>
                                </FluentMenuButton>
                            </FluentStack>
                        </div>
                        
                        <!-- Card Content -->
                        <div style="padding: 15px 20px; flex-grow: 1;">
                            <FluentLabel Typo="Typography.Body" Style="line-height: 1.6; color: #666; display: -webkit-box; -webkit-line-clamp: 4; -webkit-box-orient: vertical; overflow: hidden;">
                                @card.Content
                            </FluentLabel>

                            @if (card.Attachments?.Any() == true)
                            {
                                <div style="margin-top: 10px;">
                                    <FluentStack Orientation="Orientation.Horizontal" Wrap="true" VerticalGap="6" HorizontalGap="6">
                                        @foreach (var a in card.Attachments.Take(3))
                                        {
                                            <FluentBadge Appearance="Appearance.Neutral" Icon="@(new Icons.Regular.Size16.Attach())" Style="font-size: 11px; cursor: default;">
                                                @a.FileName (@(FormatSize(a.FileSize)))
                                            </FluentBadge>
                                        }
                                        @if (card.Attachments.Count() > 3)
                                        {
                                            <FluentBadge Appearance="Appearance.Neutral" Style="font-size: 11px;">+@(card.Attachments.Count() - 3) more</FluentBadge>
                                        }
                                    </FluentStack>
                                </div>
                            }
                        </div>
                        
                        <!-- Card Footer -->
                        <div style="padding: 15px 20px 20px 20px; border-top: 1px solid #f0f0f0;">
                            <FluentStack Orientation="Orientation.Vertical" VerticalGap="10">
                                 @if (card.CardTags?.Any() == true)
                                 {
                                     <FluentStack Orientation="Orientation.Horizontal" VerticalGap="5" Wrap="true">
                                         @foreach (var cardTag in card.CardTags.Take(3))
                                         {
                                             <FluentBadge Appearance="Appearance.Accent" Style="font-size: 11px;">@cardTag.Tag?.Name</FluentBadge>
                                         }
                                         @if (card.CardTags.Count() > 3)
                                         {
                                             <FluentBadge Appearance="Appearance.Neutral" Style="font-size: 11px;">+@(card.CardTags.Count() - 3) more</FluentBadge>
                                         }
                                     </FluentStack>
                                 }
                                
                                <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                                    <FluentIcon Value="@(new Icons.Regular.Size16.Calendar())" />
                                    <FluentLabel Color="Color.Neutral" Style="font-size: 12px;">
                                        @card.CreatedAt.ToLocalTime().ToString("MMM dd, yyyy")
                                    </FluentLabel>
                                    @if (card.UpdatedAt.HasValue && card.UpdatedAt != card.CreatedAt)
                                    {
                                        <FluentIcon Value="@(new Icons.Regular.Size16.Edit())" />
                                        <FluentLabel Color="Color.Neutral" Style="font-size: 12px;">
                                            @card.UpdatedAt.Value.ToLocalTime().ToString("MMM dd")
                                        </FluentLabel>
                                    }
                                </FluentStack>
                            </FluentStack>
                        </div>
                    </FluentCard>
                </FluentGridItem>
            }
        </FluentGrid>
    }
    <!-- Error Message Display -->
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <FluentCard Style="padding: 20px; background: var(--error-background, #ffebee); border-left: 4px solid var(--error-foreground, #f44336);">
            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="10">
                <FluentIcon Value="@(new Icons.Regular.Size20.Warning())" />
                <FluentLabel>@errorMessage</FluentLabel>
                <FluentButton Appearance="Appearance.Stealth" @onclick="() => errorMessage = null" Title="Dismiss">
                    <FluentIcon Value="@(new Icons.Regular.Size16.Dismiss())" />
                </FluentButton>
            </FluentStack>
        </FluentCard>
    }
</FluentStack>

<!-- Add/Edit Card Modal -->
<FluentDialog @bind-Hidden="@hideAddCard" 
             Modal="true" 
             TrapFocus="true"
             Style="--dialog-width: 700px; --dialog-height: auto;">
    <FluentDialogHeader>
        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
            <div style="font-size: 20px; color: var(--accent-foreground-rest);">üìù</div>
            <FluentLabel Typo="Typography.H4" Style="margin: 0;">
                Card Details
            </FluentLabel>
        </FluentStack>
    </FluentDialogHeader>
    
    <FluentDialogBody>
        <FluentStack Orientation="Orientation.Vertical" VerticalGap="20">
            <FluentTextField @bind-Value="newCard.Title" 
                           Label="Card Title" 
                           Placeholder="Enter a descriptive title..."
                           Required="true"
                           Style="width: 100%;" />
            
            <FluentTextArea @bind-Value="newCard.Content" 
                          Label="Card Content" 
                          Placeholder="Enter the main content of your card..."
                          Required="true"
                          Rows="6"
                          Style="width: 100%;" />
            
            <FluentTextField @bind-Value="newTagInput" 
                           Label="Tags (comma separated)" 
                           Placeholder="tag1, tag2, tag3..."
                           Style="width: 100%;" />
            
            @if (!string.IsNullOrEmpty(newTagInput))
            {
                <FluentStack Orientation="Orientation.Horizontal" VerticalGap="5" Wrap="true">
                    <FluentLabel>Preview tags:</FluentLabel>
                    @foreach (var tag in ParseTags(newTagInput))
                    {
                        <FluentBadge Appearance="Appearance.Accent" Style="font-size: 11px;">@tag</FluentBadge>
                    }
                </FluentStack>
            }

            <!-- Attachments uploader/list -->
            <FluentDivider />
            <FluentLabel Typo="Typography.H6">Attachments</FluentLabel>
            <InputFile OnChange="OnAttachmentSelectedAsync" multiple />
            
            @if (tempAttachments.Any())
            {
                <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                    @foreach (var a in tempAttachments)
                    {
                        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="8">
                            <FluentIcon Value="@(new Icons.Regular.Size16.Attach())" />
                            <FluentLabel Style="flex-grow: 1;">@a.FileName (@(FormatSize(a.FileSize)))</FluentLabel>
                            
                            @if (a.Id != Guid.Empty)
                            {
                                <!-- Botones para adjuntos existentes -->
                                <FluentButton Appearance="Appearance.Stealth" Title="Download" @onclick="() => DownloadAttachmentAsync(a)">
                                    <FluentIcon Value="@(new Icons.Regular.Size16.ArrowDownload())" />
                                </FluentButton>
                                <FluentButton Appearance="Appearance.Stealth" Title="Delete" @onclick="() => DeleteExistingAttachmentAsync(a)">
                                    <FluentIcon Value="@(new Icons.Regular.Size16.Delete())" />
                                </FluentButton>
                            }
                            else
                            {
                                <!-- Bot√≥n para remover adjuntos temporales (no guardados a√∫n) -->
                                <FluentButton Appearance="Appearance.Stealth" Title="Remove" @onclick="() => RemoveTempAttachment(a)">
                                    <FluentIcon Value="@(new Icons.Regular.Size16.Dismiss())" />
                                </FluentButton>
                            }
                        </FluentStack>
                    }
                </FluentStack>
            }
        </FluentStack>
    </FluentDialogBody>
    
    <FluentDialogFooter>
        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="10" HorizontalAlignment="HorizontalAlignment.Right">
            <FluentButton Appearance="Appearance.Neutral" 
                         @onclick="HideAddCard">
                Cancel
            </FluentButton>
            <FluentButton Appearance="Appearance.Accent" 
                         @onclick="SaveCardAsync">
                Save Card
            </FluentButton>
        </FluentStack>
    </FluentDialogFooter>
</FluentDialog>

<!-- Confirm Delete Dialog -->
<FluentDialog @bind-Hidden="confirmDeleteHidden"
              Modal="true"
              TrapFocus="true"
              Style="--dialog-width: 420px; --dialog-height: auto;">
    <FluentDialogHeader>
        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="8">
            <FluentIcon Value="@(new Icons.Regular.Size20.Warning())" />
            <FluentLabel Typo="Typography.H5">Delete Card</FluentLabel>
        </FluentStack>
    </FluentDialogHeader>
    <FluentDialogBody>
        <FluentLabel>Are you sure you want to delete "@cardToDelete?.Title"?</FluentLabel>
    </FluentDialogBody>
    <FluentDialogFooter>
        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Right" HorizontalGap="8">
            <FluentButton Appearance="Appearance.Neutral" @onclick="() => confirmDeleteHidden = true">Cancel</FluentButton>
            <FluentButton Appearance="Appearance.Accent" @onclick="DeleteCardConfirmedAsync">Delete</FluentButton>
        </FluentStack>
    </FluentDialogFooter>
</FluentDialog>

<style>
    .card-hover:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    }
    
    .selected-card {
        border: 2px solid var(--accent-fill-rest);
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
</style>

<FluentDialog @bind-Hidden="viewCardHidden"
              Modal="true"
              TrapFocus="true"
              Style="--dialog-width: 700px; --dialog-height: auto;">
    <FluentDialogHeader>
        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
            <div style="font-size: 20px; color: var(--accent-foreground-rest);">üìÑ</div>
            <FluentLabel Typo="Typography.H4" Style="margin: 0;">View Card</FluentLabel>
        </FluentStack>
    </FluentDialogHeader>
    <FluentDialogBody>
        @if (viewingCard != null)
        {
            <FluentStack Orientation="Orientation.Vertical" VerticalGap="16">
                <FluentLabel Typo="Typography.H5" Style="font-weight: 600;">@viewingCard.Title</FluentLabel>
                <FluentLabel Typo="Typography.Body" Style="white-space: pre-wrap; line-height: 1.6; color: #666;">@viewingCard.Content</FluentLabel>

                @if (viewingCard.CardTags?.Any() == true)
                {
                    <FluentStack Orientation="Orientation.Horizontal" VerticalGap="5" Wrap="true">
                        @foreach (var ct in viewingCard.CardTags)
                        {
                            <FluentBadge Appearance="Appearance.Accent" Style="font-size: 11px;">@ct.Tag?.Name</FluentBadge>
                        }
                    </FluentStack>
                }

                @if (viewingCard.Attachments?.Any() == true)
                {
                    <FluentDivider />
                    <FluentLabel Typo="Typography.H6">Attachments</FluentLabel>
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                        @foreach (var a in viewingCard.Attachments)
                        {
                            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="8">
                                <FluentIcon Value="@(new Icons.Regular.Size16.Attach())" />
                                <FluentLabel Style="flex-grow: 1;">@a.FileName (@(FormatSize(a.FileSize)))</FluentLabel>
                                <FluentButton Appearance="Appearance.Stealth" Title="Download" @onclick="() => DownloadAttachmentAsync(a)">
                                    <FluentIcon Value="@(new Icons.Regular.Size16.ArrowDownload())" />
                                </FluentButton>
                            </FluentStack>
                        }
                    </FluentStack>
                }

                <FluentDivider />
                <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="8">
                    <FluentIcon Value="@(new Icons.Regular.Size16.Calendar())" />
                    <FluentLabel Color="Color.Neutral" Style="font-size: 12px;">
                        Created: @viewingCard.CreatedAt.ToLocalTime().ToString("MMM dd, yyyy")
                    </FluentLabel>
                    @if (viewingCard.UpdatedAt.HasValue && viewingCard.UpdatedAt != viewingCard.CreatedAt)
                    {
                        <FluentIcon Value="@(new Icons.Regular.Size16.Edit())" />
                        <FluentLabel Color="Color.Neutral" Style="font-size: 12px;">
                            Updated: @viewingCard.UpdatedAt.Value.ToLocalTime().ToString("MMM dd, yyyy")
                        </FluentLabel>
                    }
                </FluentStack>
            </FluentStack>
        }
    </FluentDialogBody>
    <FluentDialogFooter>
        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="10" HorizontalAlignment="HorizontalAlignment.Right">
            <FluentButton Appearance="Appearance.Neutral" @onclick="HideViewCard">Close</FluentButton>
            <FluentButton Appearance="Appearance.Accent" @onclick="() => { if (viewingCard != null) { EditCard(viewingCard); viewCardHidden = true; } }">Edit</FluentButton>
        </FluentStack>
    </FluentDialogFooter>
</FluentDialog>

<!-- Confirm Delete Dialog -->
<FluentDialog @bind-Hidden="confirmDeleteHidden"
              Modal="true"
              TrapFocus="true"
              Style="--dialog-width: 420px; --dialog-height: auto;">
    <FluentDialogHeader>
        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="8">
            <FluentIcon Value="@(new Icons.Regular.Size20.Warning())" />
            <FluentLabel Typo="Typography.H5">Delete Card</FluentLabel>
        </FluentStack>
    </FluentDialogHeader>
    <FluentDialogBody>
        <FluentLabel>Are you sure you want to delete "@cardToDelete?.Title"?</FluentLabel>
    </FluentDialogBody>
    <FluentDialogFooter>
        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Right" HorizontalGap="8">
            <FluentButton Appearance="Appearance.Neutral" @onclick="() => confirmDeleteHidden = true">Cancel</FluentButton>
            <FluentButton Appearance="Appearance.Accent" @onclick="DeleteCardConfirmedAsync">Delete</FluentButton>
        </FluentStack>
    </FluentDialogFooter>
</FluentDialog>

<style>
    .card-hover:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    }
    
    .selected-card {
        border: 2px solid var(--accent-fill-rest);
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
</style>

@code {
    private List<Card> cards = new();
    private HashSet<string> uniqueTags = new();
    private Card newCard = new();
    private Card? editingCard = null;
    private Card? selectedCard = null;
    private string searchTerm = string.Empty;
    private string sortBy = "newest";
    private string filterTag = string.Empty;
    private string newTagInput = string.Empty;
    private bool hideAddCard = true;
    private bool confirmDeleteHidden = true;
    private Card? cardToDelete;
    private string? errorMessage;

    // lista temporal de adjuntos en el modal (antes de guardar)
    private List<CardAttachment> tempAttachments = new();

    // Estado para modal de vista (solo lectura)
    private bool viewCardHidden = true;
    private Card? viewingCard = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadCardsAsync();
    }

    private async Task LoadCardsAsync()
    {
        try
        {
            var list = await CardService.GetAllAsync();
            cards = list.ToList();
            RecomputeUniqueTags();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading cards: {ex.Message}";
        }
        StateHasChanged();
    }

    private void RecomputeUniqueTags()
    {
        uniqueTags = cards
            .SelectMany(c => c.CardTags ?? Enumerable.Empty<CardTag>())
            .Where(ct => ct.Tag != null && !string.IsNullOrWhiteSpace(ct.Tag.Name))
            .Select(ct => ct.Tag!.Name)
            .Distinct(StringComparer.OrdinalIgnoreCase)
            .OrderBy(n => n)
            .ToHashSet(StringComparer.OrdinalIgnoreCase);
    }

    private IEnumerable<string> ParseTags(string input)
    {
        return (input ?? string.Empty)
            .Split(',', StringSplitOptions.RemoveEmptyEntries)
            .Select(t => t.Trim())
            .Where(t => !string.IsNullOrWhiteSpace(t))
            .Distinct(StringComparer.OrdinalIgnoreCase);
    }

    private void ShowAddCard()
    {
        editingCard = null;
        newCard = new Card();
        newTagInput = string.Empty;
        tempAttachments.Clear();
        hideAddCard = false;
    }

    private void HideAddCard()
    {
        hideAddCard = true;
        editingCard = null;
        newCard = new Card();
        newTagInput = string.Empty;
        tempAttachments.Clear();
    }

    private void EditCard(Card card)
    {
        editingCard = card;
        newCard = new Card
        {
            Id = card.Id,
            Title = card.Title,
            Content = card.Content,
            CreatedAt = card.CreatedAt,
            UpdatedAt = card.UpdatedAt,
            UserId = card.UserId
        };
        // Preload tag names to input
        var tagNames = card.CardTags?.Select(ct => ct.Tag?.Name).Where(n => !string.IsNullOrWhiteSpace(n)) ?? Enumerable.Empty<string?>();
        newTagInput = string.Join(", ", tagNames!);
        // Preload attachments metadata to temp list (do not copy data)
        tempAttachments = (card.Attachments ?? new List<CardAttachment>())
            .Select(a => new CardAttachment
            {
                Id = a.Id,
                CardId = a.CardId,
                FileName = a.FileName,
                ContentType = a.ContentType,
                FileSize = a.FileSize,
                UploadedAt = a.UploadedAt
            }).ToList();
        hideAddCard = false;
    }

    private async Task SaveCardAsync()
    {
        if (string.IsNullOrWhiteSpace(newCard.Title) || string.IsNullOrWhiteSpace(newCard.Content))
            return;

        // Build CardTags from input
        var tagNames = ParseTags(newTagInput);
        newCard.CardTags = tagNames.Select(name => new CardTag
        {
            Tag = new Tag { Name = name }
        }).ToList();

        try
        {
            if (editingCard != null)
            {
                newCard.Id = editingCard.Id;
                newCard.CreatedAt = editingCard.CreatedAt;
                // Preserve the UserId to satisfy FK (or fallback at service level)
                newCard.UserId = editingCard.UserId;
                await CardService.UpdateAsync(newCard);
                // Guardar adjuntos a√±adidos (nuevos con FileData cargado)
                foreach (var a in tempAttachments.Where(x => x.Id == Guid.Empty && x.FileData?.Length > 0))
                {
                    a.CardId = newCard.Id;
                    await AttachmentService.AddAsync(a);
                }
            }
            else
            {
                newCard.Id = Guid.Empty; // let service assign if needed
                newCard.CreatedAt = DateTime.UtcNow;
                // If no user is set, service will fallback to default admin
                await CardService.AddAsync(newCard);
                // asociar adjuntos nuevos usando el Id asignado
                foreach (var a in tempAttachments.Where(x => x.FileData?.Length > 0))
                {
                    a.CardId = newCard.Id;
                    await AttachmentService.AddAsync(a);
                }
            }
            await LoadCardsAsync();
            HideAddCard();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving card: {ex.Message}";
        }
    }

    private async Task OnAttachmentSelectedAsync(InputFileChangeEventArgs e)
    {
        try
        {
            foreach (var file in e.GetMultipleFiles())
            {
                var contentType = file.ContentType ?? "application/octet-stream";
                if (!AttachmentService.IsValidFileType(contentType))
                {
                    errorMessage = $"El tipo de archivo '{contentType}' no est√° permitido para el archivo '{file.Name}'.";
                    continue;
                }
                if (!AttachmentService.IsValidFileSize(file.Size))
                {
                    errorMessage = $"El archivo '{file.Name}' es demasiado grande. Tama√±o m√°ximo permitido: 10 MB.";
                    continue;
                }

                using var ms = new MemoryStream();
                await file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(ms);
                var data = ms.ToArray();
                tempAttachments.Add(new CardAttachment
                {
                    Id = Guid.Empty,
                    FileName = file.Name,
                    ContentType = contentType,
                    FileSize = file.Size,
                    FileData = data,
                    UploadedAt = DateTime.UtcNow
                });
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al procesar archivos: {ex.Message}";
        }
    }

    private void RemoveTempAttachment(CardAttachment a)
    {
        tempAttachments.Remove(a);
    }

    private void SelectCard(Card card)
    {
        viewingCard = card;
        viewCardHidden = false;
    }

    private void HideViewCard()
    {
        viewCardHidden = true;
        viewingCard = null;
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
    }

    private void ClearFilters()
    {
        searchTerm = string.Empty;
        filterTag = string.Empty;
        sortBy = "newest";
    }

    private IEnumerable<Card> GetFilteredCards()
    {
        var filtered = cards.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrEmpty(searchTerm))
        {
            filtered = filtered.Where(c => 
                c.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (c.Content?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false));
        }

        // Apply tag filter
        if (!string.IsNullOrWhiteSpace(filterTag))
        {
            filtered = filtered.Where(c => c.CardTags != null && c.CardTags.Any(ct => ct.Tag != null && string.Equals(ct.Tag.Name, filterTag, StringComparison.OrdinalIgnoreCase)));
        }

        // Apply sorting
        filtered = sortBy switch
        {
            "oldest" => filtered.OrderBy(c => c.CreatedAt),
            "title" => filtered.OrderBy(c => c.Title),
            "updated" => filtered.OrderByDescending(c => c.UpdatedAt ?? c.CreatedAt),
            _ => filtered.OrderByDescending(c => c.CreatedAt)
        };

        return filtered;
    }

    private IEnumerable<Card> GetRecentCards()
    {
        return cards.Where(c => c.CreatedAt >= DateTime.UtcNow.AddDays(-7));
    }

    private IEnumerable<Card> GetRecentlyUpdated()
    {
        return cards.Where(c => c.UpdatedAt.HasValue && c.UpdatedAt >= DateTime.UtcNow.AddDays(-7));
    }

    private void ConfirmDelete(Card card)
    {
        cardToDelete = card;
        confirmDeleteHidden = false;
    }

    private async Task DeleteCardConfirmedAsync()
    {
        if (cardToDelete == null)
        {
            confirmDeleteHidden = true;
            return;
        }
        try
        {
            await CardService.DeleteAsync(cardToDelete.Id);
            confirmDeleteHidden = true;
            cardToDelete = null;
            await LoadCardsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting card: {ex.Message}";
        }
    }
    private async Task DuplicateCardAsync(Card card)
    {
        try
        {
            var duplicate = new Card
            {
                Id = Guid.NewGuid(),
                Title = $"{card.Title} (Copy)",
                Content = card.Content,
                CreatedAt = DateTime.UtcNow,
                // Ensure FK validity by copying the owner
                UserId = card.UserId,
                CardTags = (card.CardTags ?? new List<CardTag>())
                    .Where(ct => ct.Tag != null)
                    .Select(ct => new CardTag { Tag = new Tag { Name = ct.Tag!.Name } })
                    .ToList()
            };

            await CardService.AddAsync(duplicate);
            await LoadCardsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error duplicating card: {ex.Message}";
        }
    }

    private static string FormatSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.#} {sizes[order]}";
    }

    private async Task DownloadAttachmentAsync(CardAttachment attachment)
    {
        try
        {
            var data = await AttachmentService.GetFileDataAsync(attachment.Id);
            if (data == null || data.Length == 0)
            {
                errorMessage = "El archivo no est√° disponible.";
                return;
            }

            // Crear un data URL para descargar en el navegador
            var base64 = Convert.ToBase64String(data);
            var contentType = string.IsNullOrWhiteSpace(attachment.ContentType) ? "application/octet-stream" : attachment.ContentType;
            var fileName = string.IsNullOrWhiteSpace(attachment.FileName) ? "download" : attachment.FileName;
            await TriggerBrowserDownloadAsync($"data:{contentType};base64,{base64}", fileName);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al descargar: {ex.Message}";
        }
    }

    private async Task DeleteExistingAttachmentAsync(CardAttachment attachment)
    {
        try
        {
            await AttachmentService.DeleteAsync(attachment.Id);
            // Quitar de la lista temporal tambi√©n
            tempAttachments.RemoveAll(a => a.Id == attachment.Id);
            // Si estamos editando, reflejar en la tarjeta seleccionada
            if (editingCard != null)
            {
                var card = cards.FirstOrDefault(c => c.Id == editingCard.Id);
                card?.Attachments?.Remove(card.Attachments.FirstOrDefault(x => x.Id == attachment.Id)!);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al eliminar adjunto: {ex.Message}";
        }
    }

    [Inject]
    private Microsoft.JSInterop.IJSRuntime JS { get; set; } = default!;

    private async Task TriggerBrowserDownloadAsync(string url, string fileName)
    {
        // Crea un enlace temporal y dispara click para descargar
        await JS.InvokeVoidAsync("eval", $"(function() {{ var a=document.createElement('a'); a.href='{url}'; a.download='{fileName}'; document.body.appendChild(a); a.click(); document.body.removeChild(a); }})()");
    }
}
