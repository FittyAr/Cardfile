@page "/login"
@using Cardfile.Shared.Models
@using Microsoft.FluentUI.AspNetCore.Components
@inject NavigationManager Navigation
@inject IAuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject IAppSettingsService AppSettingsService

<FluentStack Orientation="Orientation.Vertical" VerticalGap="30" Style="max-width: 400px; margin: 0 auto; padding: 40px 20px;">
    <FluentStack Orientation="Orientation.Vertical" VerticalGap="10" Style="text-align: center;">
        <FluentIcon Value="@(new Icons.Regular.Size48.Person())" Color="Color.Accent" />
        <FluentLabel Typo="Typography.H3" Color="Color.Accent">Welcome Back</FluentLabel>
        <FluentLabel Typo="Typography.Body" Color="Color.Neutral">Sign in to your account</FluentLabel>
    </FluentStack>
    
    <FluentCard Style="padding: 30px;">
        <EditForm Model="loginModel" OnValidSubmit="HandleLoginAsync">
            <DataAnnotationsValidator />
            <FluentValidationSummary />
            
            <FluentStack Orientation="Orientation.Vertical" VerticalGap="20">
                <FluentTextField @bind-Value="loginModel.Username" 
                               Label="Username" 
                               Placeholder="Enter your username"
                               Required="true"
                               Style="width: 100%;"
                               IconStart="@(new Icons.Regular.Size20.Person())" />
                
                <FluentTextField @bind-Value="loginModel.Password" 
                               Label="Password" 
                               Placeholder="Enter your password"
                               TextFieldType="TextFieldType.Password"
                               Required="true"
                               Style="width: 100%;"
                               IconStart="@(new Icons.Regular.Size20.Key())" />
                
                <FluentButton Type="ButtonType.Submit" 
                            Appearance="Appearance.Accent" 
                            Style="width: 100%; margin-top: 10px;"
                            Disabled="@isLoading"
                            IconStart="@(new Icons.Regular.Size20.ArrowEnter())">
                    @(isLoading ? "Signing In..." : "Sign In")
                </FluentButton>
            </FluentStack>
        </EditForm>
    </FluentCard>
    
    @if (!string.IsNullOrEmpty(message))
    {
        <FluentMessageBar Intent="@messageIntent" Style="margin-top: 20px;">
            <FluentIcon Value="@((Icon)(messageIntent == MessageIntent.Error ? new Icons.Regular.Size20.ErrorCircle() : new Icons.Regular.Size20.CheckmarkCircle()))" Slot="icon" />
            @message
        </FluentMessageBar>
    }
    
    <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="5" Style="justify-content: center; margin-top: 20px;">
        <FluentLabel Typo="Typography.Body" Color="Color.Neutral">Don't have an account?</FluentLabel>
        <FluentAnchor Href="/register" Appearance="Appearance.Hypertext">Sign up here</FluentAnchor>
    </FluentStack>
</FluentStack>

@code {
    /// <summary>
    /// View model del formulario de autenticación
    /// </summary>
    private LoginModel loginModel = new();

    /// <summary>
    /// Mensaje de estado o error a mostrar al usuario
    /// </summary>
    private string? message;

    /// <summary>
    /// Indica si se está procesando la solicitud de login
    /// </summary>
    private bool isLoading = false;

    /// <summary>
    /// Maneja el login del usuario usando IAuthService y notifica el cambio de AuthenticationState
    /// </summary>
    private async Task HandleLoginAsync()
    {
        message = null;
        messageIntent = MessageIntent.Info;

        try
        {
            isLoading = true;

            // Validación adicional por seguridad
            if (string.IsNullOrWhiteSpace(loginModel.Username) || string.IsNullOrWhiteSpace(loginModel.Password))
            {
                message = "Username and password are required.";
                messageIntent = MessageIntent.Error;
                return;
            }

            // Intentar autenticar
 
             var user = await AuthService.LoginAsync(loginModel.Username, loginModel.Password);
 
             
             if (user == null)
             {
 
                 message = "Invalid username or password.";
                 messageIntent = MessageIntent.Error;
                 return;
             }

             // AuthService.LoginAsync ya notifica el cambio de estado automáticamente
             // Agregar un pequeño delay para permitir que el estado se propague
             await Task.Delay(100);

             // Navegar a Cards por defecto
             Navigation.NavigateTo("/cards");
        }
        catch (Exception ex)
        {
            message = $"An unexpected error occurred: {ex.Message}";
            messageIntent = MessageIntent.Error;
        }
        finally
        {
            isLoading = false;
        }
    }

    private MessageIntent messageIntent = MessageIntent.Info;

    /// <summary>
    /// Modelo de login para la vista
    /// </summary>
    public class LoginModel
    {
        [Required]
        public string Username { get; set; } = string.Empty;
        [Required]
        public string Password { get; set; } = string.Empty;
    }
}
